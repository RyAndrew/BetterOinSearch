/*
 * File: app/view/MainPanel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.3.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.3.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BetterOinSearch.view.MainPanel', {
	extend: 'Ext.panel.Panel',
	alias: 'widget.mainpanel',

	requires: [
		'BetterOinSearch.view.MainPanelViewModel',
		'BetterOinSearch.view.WorkflowsPanel',
		'Ext.grid.Panel',
		'Ext.grid.column.Number',
		'Ext.view.Table',
		'Ext.selection.CheckboxModel',
		'Ext.tab.Panel',
		'Ext.form.Panel',
		'Ext.form.field.Tag',
		'Ext.tab.Tab',
		'Ext.toolbar.Toolbar',
		'Ext.toolbar.Fill',
		'Ext.grid.plugin.Exporter',
		'Ext.toolbar.TextItem',
		'Ext.exporter.text.CSV'
	],

	viewModel: {
		type: 'mainpanel'
	},
	frame: true,
	minHeight: 500,
	minWidth: 500,
	title: '',
	defaultListenerScope: true,

	layout: {
		type: 'vbox',
		align: 'stretch'
	},
	items: [
		{
			xtype: 'container',
			flex: 1,
			layout: {
				type: 'hbox',
				align: 'stretch'
			},
			items: [
				{
					xtype: 'container',
					userCls: 'force-grid-border',
					width: 235,
					layout: {
						type: 'vbox',
						align: 'stretch'
					},
					items: [
						{
							xtype: 'gridpanel',
							flex: 1,
							bodyBorder: true,
							title: '<i class="fas fa-filter"></i> Categories',
							bind: {
								store: '{oinCategoryStore}'
							},
							columns: [
								{
									xtype: 'gridcolumn',
									width: 155,
									dataIndex: 'categoryLabel',
									text: 'Category'
								},
								{
									xtype: 'numbercolumn',
									flex: 1,
									align: 'end',
									dataIndex: 'count',
									text: 'Count',
									format: '0,0'
								}
							],
							listeners: {
								selectionchange: 'onGridpanelSelectionChange'
							}
						},
						{
							xtype: 'gridpanel',
							height: 350,
							bodyBorder: true,
							title: '<i class="fas fa-filter"></i> Capabilities',
							hideHeaders: true,
							bind: {
								store: '{oinCapabilities}'
							},
							columns: [
								{
									xtype: 'gridcolumn',
									flex: 1,
									dataIndex: 'capabilities',
									text: 'String'
								}
							],
							selModel: {
								selType: 'checkboxmodel'
							},
							listeners: {
								selectionchange: 'onGridpanelSelectionChange1'
							}
						},
						{
							xtype: 'panel',
							frame: true,
							height: 53,
							html: '&nbsp; Made with <font color=red>&#x2764;</font> by<BR><a href="https://github.com/RyAndrew/BetterOinSearch">Andrew Rymarczyk</a>',
							bodyPadding: '6 0 0 0',
							bodyStyle: {
								'text-align': 'center',
								'font-size': '18px'
							},
							title: ''
						}
					]
				},
				{
					xtype: 'tabpanel',
					border: false,
					flex: 1,
					itemId: 'tabs',
					width: 100,
					bodyBorder: false,
					activeTab: 0,
					plain: true,
					items: [
						{
							xtype: 'panel',
							userCls: 'force-grid-border',
							bodyBorder: true,
							iconCls: 'x-fa fa-search',
							title: 'Search OIN',
							layout: {
								type: 'vbox',
								align: 'stretch'
							},
							items: [
								{
									xtype: 'form',
									margin: '5 0 0 0',
									layout: 'hbox',
									items: [
										{
											xtype: 'container',
											flex: 1,
											margin: '0 20 10 0',
											width: 435,
											layout: {
												type: 'hbox',
												align: 'stretch'
											},
											items: [
												{
													xtype: 'tagfield',
													flex: 1,
													itemId: 'search',
													margin: '0 0 0 10',
													userCls: 'search-label',
													fieldLabel: '',
													labelAlign: 'right',
													emptyText: 'Search',
													enableKeyEvents: true,
													hideTrigger: true,
													autoLoadOnValue: true,
													displayField: 'display',
													valueField: 'display',
													createNewOnBlur: true,
													createNewOnEnter: true,
													filterPickList: true,
													triggerOnClick: false,
													bind: {
														store: '{searchTags}'
													},
													listeners: {
														keyup: 'onTextfieldKeyup',
														render: {
															fn: 'onSearchRender',
															delay: 50
														},
														change: {
															fn: 'onSearchChange',
															delay: 1
														}
													}
												},
												{
													xtype: 'button',
													hidden: true,
													itemId: 'clearButton',
													margin: '0 0 0 10',
													text: 'X',
													listeners: {
														click: 'onButtonClick'
													}
												}
											]
										},
										{
											xtype: 'container',
											html: 'App v<BR>Data Refreshed',
											itemId: 'lastUpdate',
											style: {
												'text-align': 'right'
											}
										},
										{
											xtype: 'button',
											itemId: 'updateButton',
											margin: '0 10 0 10',
											text: 'Refresh',
											listeners: {
												click: 'onButtonClick4'
											}
										}
									]
								},
								{
									xtype: 'container',
									flex: 1,
									layout: {
										type: 'hbox',
										align: 'stretch'
									},
									items: [
										{
											xtype: 'gridpanel',
											flex: 1,
											itemId: 'oinAppGrid',
											title: '',
											bind: {
												store: '{oinAppStore}'
											},
											dockedItems: [
												{
													xtype: 'toolbar',
													dock: 'top',
													items: [
														{
															xtype: 'button',
															iconCls: 'x-fa fa-plus-square',
															text: 'Add to My Apps',
															listeners: {
																click: 'onButtonClick1'
															}
														},
														{
															xtype: 'tbfill'
														},
														{
															xtype: 'button',
															text: 'Export All OIN',
															listeners: {
																click: 'onButtonClick5'
															}
														}
													]
												}
											],
											columns: [
												{
													xtype: 'gridcolumn',
													renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
														return '<img src="'+store.cdnUrl + value+'" height="34" />';
													},
													width: 145,
													dataIndex: 'LogoImage',
													ignoreExport: true,
													text: 'Logo'
												},
												{
													xtype: 'gridcolumn',
													renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
														if(record.data.Website !== ''){
															return '<a href="'+record.data.Website+'" target="_blank">'+value+'</a>';
														}
														return value;
													},
													width: 157,
													dataIndex: 'DisplayName',
													text: 'Name'
												},
												{
													xtype: 'gridcolumn',
													text: 'SSO',
													columns: [
														{
															xtype: 'gridcolumn',
															renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
																if(value === 1){
																	return String.fromCodePoint(0x2705);
																}
															},
															userCls: 'rotate-grid-headers',
															width: 50,
															dataIndex: 'productSingleSignOn',
															exportRenderer: true,
															text: 'Single Sign-On'
														},
														{
															xtype: 'gridcolumn',
															renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
																if(record.data['SAML_2_0'] ===  1 || record.data['SAML_1_1'] === 1){
																	return String.fromCodePoint(0x2705);
																}
															},
															userCls: 'rotate-grid-headers',
															width: 50,
															dataIndex: 'SAML_2_0',
															exportRenderer: true,
															text: 'SAML'
														},
														{
															xtype: 'gridcolumn',
															renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
																if(value===1){
																	return String.fromCodePoint(0x2705);
																}
																return '';
															},
															userCls: 'rotate-grid-headers',
															width: 50,
															dataIndex: 'OIDC',
															exportRenderer: true,
															text: 'OIDC'
														},
														{
															xtype: 'gridcolumn',
															renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
																if(value===1){
																	return String.fromCodePoint(0x2705);
																}
																return '';
															},
															hidden: true,
															userCls: 'rotate-grid-headers',
															width: 50,
															dataIndex: 'accessWSFederation',
															exportRenderer: true,
															text: 'WS Fed'
														},
														{
															xtype: 'gridcolumn',
															renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
																if(record.data['AutoLogin'] === 1 || record.data['BrowserPlugin'] === 1){
																	return String.fromCodePoint(0x2705);
																	//return '&#x2705;';
																	//return '<img src="/inc/img/silk_icons/tick.png">';
																}
																return '';
															},
															userCls: 'rotate-grid-headers',
															width: 50,
															dataIndex: 'AutoLogin',
															exportRenderer: true,
															text: 'SWA'
														}
													]
												},
												{
													xtype: 'gridcolumn',
													text: 'Provisioning',
													columns: [
														{
															xtype: 'gridcolumn',
															renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
																if(value===1){
																	return String.fromCodePoint(0x2705);
																}
																return '';
															},
															userCls: 'rotate-grid-headers',
															width: 50,
															dataIndex: 'PushNewUsers',
															exportRenderer: true,
															text: 'Create Users'
														},
														{
															xtype: 'gridcolumn',
															renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
																if(value===1){
																	return String.fromCodePoint(0x2705);
																}
																return '';
															},
															userCls: 'rotate-grid-headers',
															width: 50,
															dataIndex: 'PushPasswordUpdates',
															exportRenderer: true,
															text: 'Password'
														},
														{
															xtype: 'gridcolumn',
															renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
																if(value===1){
																	return String.fromCodePoint(0x2705);
																}
																return '';
															},
															userCls: 'rotate-grid-headers',
															width: 50,
															dataIndex: 'PushUserDeactivation',
															exportRenderer: true,
															text: 'Deactivation'
														},
														{
															xtype: 'gridcolumn',
															renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
																if(value===1){
																	return String.fromCodePoint(0x2705);
																}
																return '';
															},
															userCls: 'rotate-grid-headers',
															width: 50,
															dataIndex: 'provisioningSchemaDiscovery',
															exportRenderer: true,
															text: 'Schema Disco'
														},
														{
															xtype: 'gridcolumn',
															renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
																if(value===1){
																	return String.fromCodePoint(0x2705);
																}
																return '';
															},
															userCls: 'rotate-grid-headers',
															width: 50,
															dataIndex: 'provisioningGroupPush',
															exportRenderer: true,
															text: 'Group Push'
														},
														{
															xtype: 'gridcolumn',
															renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
																if(value===1){
																	return String.fromCodePoint(0x2705);
																}
																return '';
															},
															userCls: 'rotate-grid-headers',
															width: 50,
															dataIndex: 'provisioningGroupLinking',
															exportRenderer: true,
															text: 'Group Link'
														},
														{
															xtype: 'gridcolumn',
															renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
																if(value===1){
																	return String.fromCodePoint(0x2705);
																}
																return '';
															},
															userCls: 'rotate-grid-headers',
															width: 50,
															dataIndex: 'provisioningAttributeSourcing',
															exportRenderer: true,
															text: 'Attr Sourcing'
														},
														{
															xtype: 'gridcolumn',
															renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
																if(value===1){
																	return String.fromCodePoint(0x2705);
																}
																return '';
															},
															userCls: 'rotate-grid-headers',
															width: 50,
															dataIndex: 'provisioningAttributeWriteback',
															exportRenderer: true,
															text: 'Attr Writeback'
														}
													]
												},
												{
													xtype: 'gridcolumn',
													text: 'Importing',
													columns: [
														{
															xtype: 'gridcolumn',
															renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
																if(value===1){
																	return String.fromCodePoint(0x2705);
																}
																return '';
															},
															userCls: 'rotate-grid-headers',
															width: 50,
															dataIndex: 'ImportNewUsers',
															exportRenderer: true,
															text: 'Import Users'
														},
														{
															xtype: 'gridcolumn',
															renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
																if(value===1){
																	return String.fromCodePoint(0x2705);
																}
																return '';
															},
															userCls: 'rotate-grid-headers',
															width: 50,
															dataIndex: 'ImportProfileUpdates',
															exportRenderer: true,
															text: 'Profile Updates'
														},
														{
															xtype: 'gridcolumn',
															renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
																if(value===1){
																	return String.fromCodePoint(0x2705);
																}
																return '';
															},
															userCls: 'rotate-grid-headers',
															width: 50,
															dataIndex: 'AutoConfirmImports',
															exportRenderer: true,
															text: 'Auto Confirm'
														},
														{
															xtype: 'gridcolumn',
															renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
																if(value===1){
																	return String.fromCodePoint(0x2705);
																}
																return '';
															},
															userCls: 'rotate-grid-headers',
															width: 50,
															dataIndex: 'ReactivateUsers',
															exportRenderer: true,
															text: 'Reactivation'
														}
													]
												},
												{
													xtype: 'gridcolumn',
													text: 'Workflows',
													columns: [
														{
															xtype: 'gridcolumn',
															renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
																if(value===1){
																	metaData.tdCls = 'link-cursor';
																	return '<a class="link-cursor">'+String.fromCodePoint(0x2705)+'</a>';
																}
																return '';
															},
															exportRenderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
																if(value===1){
																	return String.fromCodePoint(0x2705);
																}
																return '';
															},
															userCls: 'rotate-grid-headers',
															width: 50,
															dataIndex: 'accessWorkflowsConnectors',
															text: 'Connectors'
														},
														{
															xtype: 'gridcolumn',
															renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
																if(value===1){
																	metaData.tdCls = 'link-cursor';
																	return '<a class="link-cursor">'+String.fromCodePoint(0x2705)+'</a>';
																}
																return '';
															},
															exportRenderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
																if(value===1){
																	return String.fromCodePoint(0x2705);
																}
																return '';
															},
															userCls: 'rotate-grid-headers',
															width: 50,
															dataIndex: 'accessWorkflowsTemplates',
															text: 'Templates'
														}
													]
												},
												{
													xtype: 'gridcolumn',
													width: 275,
													dataIndex: 'Description',
													ignoreExport: true,
													text: 'Description'
												},
												{
													xtype: 'gridcolumn',
													renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
														console.log(record.data);
														return '<a href="https://www.okta.com'+value+'/#capabilities" target="_blank">OIN</a>';
													},
													exportRenderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
														return 'https://www.okta.com'+value;
													},
													width: 55,
													dataIndex: 'path',
													text: 'OIN'
												},
												{
													xtype: 'gridcolumn',
													width: 125,
													dataIndex: 'AppCategoryLabel',
													ignoreExport: true,
													text: 'Category'
												},
												{
													xtype: 'gridcolumn',
													hidden: true,
													dataIndex: 'Custom',
													ignoreExport: true,
													text: 'Custom'
												},
												{
													xtype: 'gridcolumn',
													hidden: true,
													dataIndex: 'SecurePasswordStore',
													ignoreExport: true,
													text: 'Secure Password Store'
												},
												{
													xtype: 'gridcolumn',
													hidden: true,
													dataIndex: 'SAML_2_0',
													ignoreExport: true,
													text: 'Saml 2 0'
												},
												{
													xtype: 'gridcolumn',
													hidden: true,
													dataIndex: 'SAML_1_1',
													ignoreExport: true,
													text: 'Saml 1 1'
												},
												{
													xtype: 'gridcolumn',
													hidden: true,
													dataIndex: 'BookMark',
													ignoreExport: true,
													text: 'Book Mark'
												},
												{
													xtype: 'gridcolumn',
													hidden: true,
													dataIndex: 'BrowserPlugin',
													ignoreExport: true,
													text: 'Browser Plugin'
												},
												{
													xtype: 'gridcolumn',
													hidden: true,
													dataIndex: 'BasicAuth',
													ignoreExport: true,
													text: 'Basic Auth'
												},
												{
													xtype: 'gridcolumn',
													hidden: true,
													dataIndex: 'PushProfileUpdates',
													ignoreExport: true,
													text: 'Push Profile Updates'
												},
												{
													xtype: 'gridcolumn',
													hidden: true,
													dataIndex: 'Ranking',
													ignoreExport: true,
													text: 'Ranking'
												},
												{
													xtype: 'gridcolumn',
													hidden: true,
													dataIndex: 'OMM',
													ignoreExport: true,
													text: 'Omm'
												},
												{
													xtype: 'gridcolumn',
													hidden: true,
													dataIndex: 'Name',
													ignoreExport: true,
													text: 'Name'
												},
												{
													xtype: 'gridcolumn',
													hidden: true,
													dataIndex: 'Website',
													ignoreExport: true,
													text: 'Website'
												},
												{
													xtype: 'gridcolumn',
													hidden: true,
													dataIndex: 'Version',
													ignoreExport: true,
													text: 'Version'
												},
												{
													xtype: 'gridcolumn',
													hidden: true,
													dataIndex: 'VerificationStatus',
													ignoreExport: true,
													text: 'Verification Status'
												},
												{
													xtype: 'gridcolumn',
													hidden: true,
													dataIndex: 'GroupPush',
													ignoreExport: true,
													text: 'Group Push'
												},
												{
													xtype: 'gridcolumn',
													hidden: true,
													dataIndex: 'GroupSync',
													ignoreExport: true,
													text: 'Group Sync'
												},
												{
													xtype: 'gridcolumn',
													hidden: true,
													dataIndex: 'ImportUserSchema',
													ignoreExport: true,
													text: 'Import User Schema'
												},
												{
													xtype: 'gridcolumn',
													hidden: true,
													dataIndex: 'ProfileMastering',
													ignoreExport: true,
													text: 'Profile Mastering'
												},
												{
													xtype: 'gridcolumn',
													hidden: true,
													dataIndex: 'SCIM',
													ignoreExport: true,
													text: 'Scim'
												},
												{
													xtype: 'gridcolumn',
													hidden: true,
													dataIndex: 'IntegrationApp',
													ignoreExport: true,
													text: 'Integration App'
												},
												{
													xtype: 'gridcolumn',
													hidden: true,
													dataIndex: 'AppLinksJSON',
													ignoreExport: true,
													text: 'App Links Json'
												},
												{
													xtype: 'gridcolumn',
													hidden: true,
													dataIndex: 'VersionCreatedDate',
													ignoreExport: true,
													text: 'Version Created Date'
												},
												{
													xtype: 'gridcolumn',
													hidden: true,
													dataIndex: 'DeepLinkUrl',
													ignoreExport: true,
													text: 'Deep Link Url'
												},
												{
													xtype: 'gridcolumn',
													hidden: true,
													dataIndex: 'AppCatalogDiscoverable',
													ignoreExport: true,
													text: 'App Catalog Discoverable'
												},
												{
													xtype: 'gridcolumn',
													hidden: true,
													dataIndex: 'accessSAML',
													ignoreExport: true,
													text: 'A SAML'
												},
												{
													xtype: 'gridcolumn',
													hidden: true,
													dataIndex: 'accessSWA',
													ignoreExport: true,
													text: 'A SWA'
												},
												{
													xtype: 'gridcolumn',
													hidden: true,
													dataIndex: 'accessProvisioning',
													ignoreExport: true,
													text: 'A Provisioning'
												},
												{
													xtype: 'gridcolumn',
													hidden: true,
													dataIndex: 'accessWSFederation',
													ignoreExport: true,
													text: 'A WSFederation'
												},
												{
													xtype: 'gridcolumn',
													hidden: true,
													dataIndex: 'provisioningCreate',
													ignoreExport: true,
													text: 'P Create'
												},
												{
													xtype: 'gridcolumn',
													hidden: true,
													dataIndex: 'provisioningUpdate',
													ignoreExport: true,
													text: 'P Update'
												},
												{
													xtype: 'gridcolumn',
													hidden: true,
													dataIndex: 'provisioningDeactivate',
													ignoreExport: true,
													text: 'P Deactivate'
												},
												{
													xtype: 'gridcolumn',
													hidden: true,
													dataIndex: 'provisioningSyncPassword',
													ignoreExport: true,
													text: 'P SyncPassword'
												},
												{
													xtype: 'gridcolumn',
													hidden: true,
													dataIndex: 'SupportLevel',
													ignoreExport: true,
													text: 'Support Level'
												},
												{
													xtype: 'gridcolumn',
													hidden: true,
													dataIndex: 'productLifecycleManagement',
													ignoreExport: true,
													text: 'Prod LCM'
												},
												{
													xtype: 'gridcolumn',
													hidden: true,
													dataIndex: 'productSingleSignOn',
													ignoreExport: true,
													text: 'Prod SSO'
												}
											],
											viewConfig: {
												width: 742,
												enableTextSelection: true,
												listeners: {
													cellclick: 'onTableCellClick'
												}
											},
											listeners: {
												rowdblclick: 'onOinAppGridRowDblClick',
												selectionchange: 'onOinAppGridSelectionChange'
											},
											selModel: {
												selType: 'rowmodel'
											},
											plugins: [
												{
													ptype: 'gridexporter'
												}
											]
										},
										{
											xtype: 'workflowspanel',
											itemId: 'workflowDetails'
										}
									]
								}
							],
							tabConfig: {
								xtype: 'tab',
								margin: '0 0 0 5',
								userCls: 'tab-with-border',
								width: 125
							}
						},
						{
							xtype: 'panel',
							itemId: 'myAppsTab',
							userCls: 'force-grid-border',
							iconCls: 'x-fa fa-clipboard-list',
							title: 'My Apps (0)',
							layout: {
								type: 'hbox',
								align: 'stretch'
							},
							tabConfig: {
								xtype: 'tab',
								margin: '0 0 0 5',
								userCls: 'tab-with-border',
								width: 125
							},
							items: [
								{
									xtype: 'gridpanel',
									flex: 1,
									itemId: 'myAppsGrid',
									resizable: true,
									resizeHandles: 'w',
									userCls: 'force-grid-border',
									width: 400,
									iconCls: '',
									title: '',
									bind: {
										store: '{myApps}'
									},
									dockedItems: [
										{
											xtype: 'toolbar',
											dock: 'top',
											items: [
												{
													xtype: 'tbtext',
													itemId: 'appListName',
													margin: '4 0 0 30',
													userCls: 'app-list-name'
												}
											]
										},
										{
											xtype: 'toolbar',
											dock: 'top',
											items: [
												{
													xtype: 'button',
													iconCls: 'x-fa fa-file-excel',
													text: 'Export',
													listeners: {
														click: 'onButtonClick2'
													}
												},
												{
													xtype: 'button',
													iconCls: 'x-fa fa-save',
													text: 'Save List',
													listeners: {
														click: 'onButtonClick3'
													}
												},
												{
													xtype: 'button',
													margin: '0 0 0 20',
													iconCls: 'x-fa fa-minus-square',
													text: 'Remove',
													listeners: {
														click: 'onButtonClick11'
													}
												},
												{
													xtype: 'button',
													margin: '0 0 0 30',
													iconCls: 'x-fa fa-trash-alt',
													text: 'Remove All',
													listeners: {
														click: 'onButtonClick111'
													}
												}
											]
										}
									],
									columns: [
										{
											xtype: 'gridcolumn',
											renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
												return '<img src="'+store.cdnUrl + value+'" height="34" />';
											},
											width: 145,
											dataIndex: 'LogoImage',
											ignoreExport: true,
											text: 'Logo'
										},
										{
											xtype: 'gridcolumn',
											width: 157,
											dataIndex: 'DisplayName',
											text: 'Name'
										},
										{
											xtype: 'gridcolumn',
											text: 'SSO',
											columns: [
												{
													xtype: 'gridcolumn',
													renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
														if(value === 1){
															return String.fromCodePoint(0x2705);
														}
													},
													userCls: 'rotate-grid-headers',
													width: 50,
													dataIndex: 'productSingleSignOn',
													exportRenderer: true,
													text: 'Single Sign-On'
												},
												{
													xtype: 'gridcolumn',
													renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
														if(record.data['SAML_2_0'] === 1 || record.data['SAML_1_1'] === 1){
															return String.fromCodePoint(0x2705);
														}
													},
													userCls: 'rotate-grid-headers',
													width: 50,
													dataIndex: 'SAML_2_0',
													exportRenderer: true,
													text: 'SAML'
												},
												{
													xtype: 'gridcolumn',
													renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
														if(value===1){
															return String.fromCodePoint(0x2705);
														}
														return '';
													},
													userCls: 'rotate-grid-headers',
													width: 50,
													dataIndex: 'OIDC',
													exportRenderer: true,
													text: 'OIDC'
												},
												{
													xtype: 'gridcolumn',
													renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
														if(value===1){
															return String.fromCodePoint(0x2705);
														}
														return '';
													},
													userCls: 'rotate-grid-headers',
													width: 50,
													dataIndex: 'WSFED',
													exportRenderer: true,
													text: 'WS Fed'
												},
												{
													xtype: 'gridcolumn',
													renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
														if(record.data['AutoLogin'] === 1 || record.data['BrowserPlugin'] === 1){
															return String.fromCodePoint(0x2705);
															//return '&#x2705;';
															//return '<img src="/inc/img/silk_icons/tick.png">';
														}
														return '';
													},
													userCls: 'rotate-grid-headers',
													width: 50,
													dataIndex: 'AutoLogin',
													exportRenderer: true,
													text: 'SWA'
												}
											]
										},
										{
											xtype: 'gridcolumn',
											text: 'Provisioning',
											columns: [
												{
													xtype: 'gridcolumn',
													renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
														if(value===1){
															return String.fromCodePoint(0x2705);
														}
														return '';
													},
													userCls: 'rotate-grid-headers',
													width: 50,
													dataIndex: 'PushNewUsers',
													exportRenderer: true,
													text: 'Create Users'
												},
												{
													xtype: 'gridcolumn',
													renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
														if(value===1){
															return String.fromCodePoint(0x2705);
														}
														return '';
													},
													userCls: 'rotate-grid-headers',
													width: 50,
													dataIndex: 'PushPasswordUpdates',
													exportRenderer: true,
													text: 'Password'
												},
												{
													xtype: 'gridcolumn',
													renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
														if(value===1){
															return String.fromCodePoint(0x2705);
														}
														return '';
													},
													userCls: 'rotate-grid-headers',
													width: 50,
													dataIndex: 'PushUserDeactivation',
													exportRenderer: true,
													text: 'Deactivation'
												},
												{
													xtype: 'gridcolumn',
													renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
														if(value===1){
															return String.fromCodePoint(0x2705);
														}
														return '';
													},
													userCls: 'rotate-grid-headers',
													width: 50,
													dataIndex: 'provisioningSchemaDiscovery',
													exportRenderer: true,
													text: 'Schema Disco'
												},
												{
													xtype: 'gridcolumn',
													renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
														if(value===1){
															return String.fromCodePoint(0x2705);
														}
														return '';
													},
													userCls: 'rotate-grid-headers',
													width: 50,
													dataIndex: 'provisioningGroupPush',
													exportRenderer: true,
													text: 'Group Push'
												},
												{
													xtype: 'gridcolumn',
													renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
														if(value===1){
															return String.fromCodePoint(0x2705);
														}
														return '';
													},
													userCls: 'rotate-grid-headers',
													width: 50,
													dataIndex: 'provisioningGroupLinking',
													exportRenderer: true,
													text: 'Group Link'
												},
												{
													xtype: 'gridcolumn',
													renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
														if(value===1){
															return String.fromCodePoint(0x2705);
														}
														return '';
													},
													userCls: 'rotate-grid-headers',
													width: 50,
													dataIndex: 'provisioningAttributeSourcing',
													exportRenderer: true,
													text: 'Attr Sourcing'
												},
												{
													xtype: 'gridcolumn',
													renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
														if(value===1){
															return String.fromCodePoint(0x2705);
														}
														return '';
													},
													userCls: 'rotate-grid-headers',
													width: 50,
													dataIndex: 'provisioningAttributeWriteback',
													exportRenderer: true,
													text: 'Attr Writeback'
												}
											]
										},
										{
											xtype: 'gridcolumn',
											text: 'Importing',
											columns: [
												{
													xtype: 'gridcolumn',
													renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
														if(value===1){
															return String.fromCodePoint(0x2705);
														}
														return '';
													},
													userCls: 'rotate-grid-headers',
													width: 50,
													dataIndex: 'ImportNewUsers',
													exportRenderer: true,
													text: 'Import Users'
												},
												{
													xtype: 'gridcolumn',
													renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
														if(value===1){
															return String.fromCodePoint(0x2705);
														}
														return '';
													},
													userCls: 'rotate-grid-headers',
													width: 50,
													dataIndex: 'ImportProfileUpdates',
													exportRenderer: true,
													text: 'Profile Updates'
												},
												{
													xtype: 'gridcolumn',
													renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
														if(value===1){
															return String.fromCodePoint(0x2705);
														}
														return '';
													},
													userCls: 'rotate-grid-headers',
													width: 50,
													dataIndex: 'AutoConfirmImports',
													exportRenderer: true,
													text: 'Auto Confirm'
												},
												{
													xtype: 'gridcolumn',
													renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
														if(value===1){
															return String.fromCodePoint(0x2705);
														}
														return '';
													},
													userCls: 'rotate-grid-headers',
													width: 50,
													dataIndex: 'ReactivateUsers',
													exportRenderer: true,
													text: 'Reactivation'
												}
											]
										},
										{
											xtype: 'gridcolumn',
											text: 'Workflows',
											columns: [
												{
													xtype: 'gridcolumn',
													renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
														if(value===1){
															metaData.tdCls = 'link-cursor';
															return '<a class="link-cursor">'+String.fromCodePoint(0x2705)+'</a>';
														}
														return '';
													},
													exportRenderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
														if(value===1){
															return String.fromCodePoint(0x2705);
														}
														return '';
													},
													userCls: 'rotate-grid-headers',
													width: 50,
													dataIndex: 'accessWorkflowsConnectors',
													text: 'Connectors'
												},
												{
													xtype: 'gridcolumn',
													renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
														if(value===1){
															metaData.tdCls = 'link-cursor';
															return '<a class="link-cursor">'+String.fromCodePoint(0x2705)+'</a>';
														}
														return '';
													},
													exportRenderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
														if(value===1){
															return String.fromCodePoint(0x2705);
														}
														return '';
													},
													userCls: 'rotate-grid-headers',
													width: 50,
													dataIndex: 'accessWorkflowsTemplates',
													text: 'Templates'
												}
											]
										},
										{
											xtype: 'gridcolumn',
											width: 275,
											dataIndex: 'Description',
											text: 'Description'
										},
										{
											xtype: 'gridcolumn',
											renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
												return '<a href="https://www.okta.com'+value+'/#capabilities" target="_blank">OIN</a>';
											},
											exportRenderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
												return 'https://www.okta.com'+value;
											},
											width: 55,
											dataIndex: 'path',
											text: 'OIN'
										}
									],
									viewConfig: {
										enableTextSelection: true
									},
									plugins: [
										{
											ptype: 'gridexporter'
										}
									],
									listeners: {
										selectionchange: 'onOinAppGridSelectionChange1',
										cellclick: 'onMyAppsGridCellClick'
									}
								},
								{
									xtype: 'workflowspanel',
									itemId: 'workflowDetailsMyApps'
								}
							]
						},
						{
							xtype: 'gridpanel',
							itemId: 'myAppLists',
							resizable: true,
							resizeHandles: 'w',
							userCls: 'force-grid-border',
							width: 400,
							iconCls: 'x-fa fa-list',
							title: 'My App Lists (0)',
							bind: {
								store: '{myLists}'
							},
							dockedItems: [
								{
									xtype: 'toolbar',
									dock: 'top',
									items: [
										{
											xtype: 'button',
											iconCls: 'x-fa fa-clipboard-list',
											text: 'View',
											listeners: {
												click: 'onButtonClick21'
											}
										},
										{
											xtype: 'button',
											iconCls: 'x-fa fa-copy',
											text: 'Copy Sharing Link',
											listeners: {
												click: 'onButtonClick211'
											}
										},
										{
											xtype: 'button',
											itemId: 'btnDelete',
											margin: '0 0 0 20',
											iconCls: 'x-fa fa-minus-square',
											text: 'Delete',
											listeners: {
												click: 'onBtnDeleteClick'
											}
										}
									]
								}
							],
							columns: [
								{
									xtype: 'gridcolumn',
									width: 240,
									dataIndex: 'listName',
									text: 'Name'
								},
								{
									xtype: 'gridcolumn',
									renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
										return value.length || '';
									},
									width: 96,
									dataIndex: 'appList',
									text: 'Apps'
								},
								{
									xtype: 'gridcolumn',
									width: 182,
									dataIndex: 'dateCreated',
									text: 'Date Created'
								},
								{
									xtype: 'gridcolumn',
									width: 182,
									dataIndex: 'dateModified',
									text: 'Date Modified'
								}
							],
							viewConfig: {
								enableTextSelection: true
							},
							tabConfig: {
								xtype: 'tab',
								dock: 'left',
								margin: '0 0 0 10',
								userCls: 'tab-with-border'
							},
							listeners: {
								rowdblclick: 'onMyAppListsRowDblClick'
							}
						}
					]
				}
			]
		}
	],
	listeners: {
		afterrender: 'onPanelAfterRender'
	},

	onGridpanelSelectionChange: function(model, selected, eOpts) {
		let cat = selected[0].data.category;

		if(cat==='All'){ //1 = All
			this.categoryFilter = null;
		}else{
			this.categoryFilter = {
				property:'AppCategory',
				value:cat,
				exactMatch:true
			};
		}

		this.updateFilters();
	},

	onGridpanelSelectionChange1: function(model, selected, eOpts) {
		this.capabilityFilter = [];

		const OneZeroCols = ['accessSAML','accessSWA','accessProvisioning','accessOIDC','accessWorkflowsConnectors','accessWorkflowsTemplates','accessWSFederation','provisioningCreate','provisioningUpdate','provisioningDeactivate','provisioningSyncPassword','provisioningGroupPush','provisioningGroupLinking','provisioningAttributeSourcing','provisioningAttributeWriteback','provisioningSchemaDiscovery','productSingleSignOn','productLifecycleManagement'];

		Ext.each(selected, function(sel){
			let val;
			let found = OneZeroCols.indexOf(sel.data.filter);

			if(found >= 0){
				val = 1;
			}else{
				val = 'YES';
			}
			this.capabilityFilter.push({
				property:sel.data.filter,
				value:val,
				exactMatch:true
			});
		}, this);

		this.updateFilters();
	},

	onTextfieldKeyup: function(textfield, e, eOpts) {
		//console.log('keyup');

		if(this.delayTimer){
			Ext.undefer(this.delayTimer);
		}

		let key = e.getKey();

		//dont search for comma since that triggers a tag to be created
		if(key !== 188){
			this.delayTimer = Ext.defer(function(){
				//console.log('keyup search!', e.getKey());

				this.delayTimer = false;

				//if(textfield.inputEl.getValue().length >= 2 ){
					this.searchAppsByName();
				//}

			}, 200, this);
		}
	},

	onSearchRender: function(component, eOpts) {
		component.focus();
	},

	onSearchChange: function(field, newValue, oldValue, eOpts) {
		//console.log('change!');

		if(newValue.indexOf(' ') !== -1){
			field.removeValue(' ');
			return;
		}

		this.searchAppsByName();
	},

	onButtonClick: function(button, e, eOpts) {
		this.queryById('search').setValue('');
		this.searchAppsByName('');
	},

	onButtonClick4: function(button, e, eOpts) {
		AERP.Ajax.request({
			url:'api/updateOinData',
			mask:this,
			timeout: 60000,
			success:function(resp){
				location.reload();
			},
			scope:this
		});
	},

	onButtonClick1: function(button, e, eOpts) {
		let sel = this.queryById('oinAppGrid').getSelectionModel().getSelection();

		if(sel.length < 1){
			Ext.Msg.alert(' ','Please select an app!');
			return;
		}

		this.addAppToMyApps(sel[0]);

	},

	onButtonClick5: function(button, e, eOpts) {
		this.queryById('oinAppGrid').saveDocumentAs({
		     type: 'csv',
		     title: 'All OIN Apps',
		     fileName: 'All_OIN_Apps_'+Ext.util.Format.date(new Date(), 'Y-m-d_g-ia')+'.csv'
		 });
	},

	onTableCellClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
		const cellText = e.position.column.text;

		if(cellText === 'Connectors' || cellText === 'Templates'){
			let details = this.queryById('workflowDetails');

			details.expand();
		}
	},

	onOinAppGridRowDblClick: function(tableview, record, element, rowIndex, e, eOpts) {
		this.addAppToMyApps(record);
	},

	onOinAppGridSelectionChange: function(model, selected, eOpts) {
		if(selected.length < 1){
			return;
		}

		this.showWorkflowDetails(selected[0].data.Name,'workflowDetails');
	},

	onButtonClick2: function(button, e, eOpts) {
		this.queryById('myAppsGrid').saveDocumentAs({
		     type: 'xlsx',
		     title: 'My Apps',
		     fileName: 'My_Apps_'+Ext.util.Format.date(new Date(), 'Y-m-d_g-ia')+'.xlsx'
		 });
	},

	onButtonClick3: function(button, e, eOpts) {
		this.saveListGetName();
	},

	onButtonClick11: function(button, e, eOpts) {
		let sel = this.queryById('myAppsGrid').getSelectionModel().getSelection();

		if(sel.length < 1){
			Ext.Msg.alert(' ','Please select an app!');
			return;
		}

		let store = this.getViewModel().getStore('myApps');
		store.remove(sel[0]);
		store.sync();
	},

	onButtonClick111: function(button, e, eOpts) {
		let store = this.getViewModel().getStore('myApps');
		store.removeAll();
		store.sync();
	},

	onOinAppGridSelectionChange1: function(model, selected, eOpts) {
		if(selected.length < 1){
			return;
		}

		this.showWorkflowDetails(selected[0].data.Name,'workflowDetailsMyApps');
	},

	onMyAppsGridCellClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
		const cellText = e.position.column.text;

		if(cellText === 'Connectors' || cellText === 'Templates'){
			let details = this.queryById('workflowDetailsMyApps');

			details.expand();
		}
	},

	onButtonClick21: function(button, e, eOpts) {
		let sel = this.queryById('myAppLists').getSelectionModel().getSelection();

		if(sel.length < 1){
			Ext.Msg.alert(' ','Please select a list!');
			return;
		}

		this.loadAppsFromAppList(sel[0].data.appList, sel[0].data.listName);
	},

	onButtonClick211: function(button, e, eOpts) {
		let sel = this.queryById('myAppLists').getSelectionModel().getSelection();

		if(sel.length < 1){
			Ext.Msg.alert(' ','Please select a list!');
			return;
		}

		this.copyToClipboard(location.protocol+'//'+window.location.hostname +'/?list='+sel[0].data.listId);
	},

	onBtnDeleteClick: function(button, e, eOpts) {
		let sel = this.queryById('myAppLists').getSelectionModel().getSelection();

		if(sel.length < 1){
			Ext.Msg.alert(' ','Please select a list!');
			return;
		}

		AERP.Ajax.request({
			url:'api/delete',
			mask:this,
			jsonData:{
				list:sel[0].data.listId
			},
			success:function(resp){
				let store = this.getViewModel().getStore('myLists');
				store.remove(sel[0]);
				store.sync();
				this.updateMyListsCount(store);
			},
			scope:this
		});


	},

	onMyAppListsRowDblClick: function(tableview, record, element, rowIndex, e, eOpts) {
		this.loadAppsFromAppList(record.data.appList, record.data.listName);
	},

	onPanelAfterRender: function(component, eOpts) {
		this.categoryFilter = null;
		this.searchFilter = null;
		this.searchByNameFilter = null;

		this.capabilityFilter = [];

		let cdnUrl = 'https://ok14static.oktacdn.com';

		this.readWorkflowData();

		//load my apps
		let myAppStore = this.getViewModel().getStore('myApps');
		myAppStore.on('datachanged',this.updateMyAppCount, this);
		myAppStore.load();

		myAppStore.cdnUrl = cdnUrl;

		//load oin apps
		let store = this.getViewModel().getStore('oinAppStore');
		store.cdnUrl = cdnUrl;

		var fields = store.getModel().getFields();
		Ext.each(fields,function(field){

		    switch(field.name ){
		        case 'Ranking':
		            field.sortType = this.customZeroSort;
		    }
		}, this);

		store.on('beforesort', function(store, sorters, eOpts){

		    if(sorters && sorters[0] && sorters[0]._direction){
		        appSortDir = sorters[0]._direction;
		    }
		}, this);

		store.on('load',this.oinAppsLoaded,this);
		store.sort('Ranking','ASC');
		store.load();

		let listsStore = this.getViewModel().getStore('myLists');
		listsStore.load();
		this.updateMyListsCount(listsStore);

		this.getLastApiRefresh();
	},

	addAppToMyApps: function(record) {
		let store = this.getViewModel().getStore('myApps');

		let existing = store.find('Name', record.get('Name'),0,false);

		if(existing > -1){
			return;
		}

		let rec = record.clone();
		rec.phantom = true;

		store.add(rec);

		store.sync();
	},

	searchAppsByName: function() {
		let searchField = this.queryById('search');
		let searchText =searchField.inputEl.getValue();

		let searchFilterEntriesArr = this.queryById('search').getValue();

		let store = this.getViewModel().getStore('oinAppStore');

		let searchByNameList = [];

		searchByNameList = searchByNameList.concat(searchFilterEntriesArr);

		// text value not in a tag yet
		if(searchText !== ''){
			searchByNameList.push(searchText.trim());
		}

		let searchByNameListRegexArr = [];
		Ext.each(searchByNameList,function(searchName){
			searchByNameListRegexArr.push(Ext.String.createRegex(searchName.trim(), false, false, true));
		});

		//console.log('searchByNameList',searchByNameList);
		//console.log('searchByNameListRegexArr',searchByNameListRegexArr);

		//if the search params have not changed, dont search
		if(searchByNameListRegexArr === this.lastSearch){
			return;
		}
		this.lastSearch = searchByNameListRegexArr;

		if(searchByNameList.length < 1){
			this.searchByNameFilter = null;
		}else{
			this.searchByNameFilter = {
				filterNameVals: searchByNameListRegexArr,
				filterFn: function(item) {
					let nameFound = false;

					Ext.each(this.filterNameVals,function(matcher){
						nameFound = matcher.test(item.data.DisplayName);
						if(nameFound){
							//console.log(item.data.DisplayName, matcher, nameFound );
							return false;//quit loop
						}
					});

					return nameFound;
				}
			};
		}

		if(this.searchByNameFilter === null){
			this.queryById('clearButton').hide();
		}else{
			this.queryById('clearButton').show();

			store.sort({property:'DisplayName',direction:'ASC'});
		}

		this.updateFilters();
	},

	copyToClipboard: function(text) {
		if (typeof(navigator.clipboard)=='undefined') {
		    var textArea = document.createElement("textarea");
		    textArea.value = text;
		    textArea.style.position="fixed";  //avoid scrolling to bottom
		    document.body.appendChild(textArea);
		    textArea.focus();
		    textArea.select();

		    try {
		        let successful =document.execCommand('copy');
				if(!successful){
					Ext.Msg.alert(' ','Failed to copy to clipboard 1');
				}
		        //var msg = successful ? 'successful' : 'unsuccessful';
		        //toastr.info(msg);
		    } catch (err) {
					Ext.Msg.alert(' ','Failed to copy to clipboard 2');
		    }

		    document.body.removeChild(textArea);
		    return;
		}else{
			navigator.clipboard.writeText(text).then(function() {}, function() {
				Ext.Msg.alert(' ','Failed to copy to clipboard');
			});
		}
	},

	customZeroSort: function(s) {
		if(s === 0){
		    if(appSortDir == "ASC"){
		        return 999;
		    }else{
		        return 0;
		    }
		}
		return s;
	},

	loadAppListFromUrl: function() {
		var searchQuery = Ext.Object.fromQueryString(window.location.search);

		if(searchQuery.list){
			AERP.Ajax.request({
				url:'api/read',
				mask:this,
				jsonData:{
					list:searchQuery.list
				},
				success:function(resp){
					if(resp.data === null){
						Ext.Msg.alert(' ','This list has been deleted');
						return;
					}
					resp.data.appList = Ext.decode(resp.data.appList);
					this.loadAppsFromAppList(resp.data.appList, resp.data.listName);
				},
				scope:this
			});
		}

	},

	oinAppsLoaded: function(store, records) {
		if(records==undefined){
			return;
		}

		let groups = {
			'All':{
				category:'All',
				categoryLabel:'All',
				count:records.length
			}
		};

		Ext.each(records,function(rec){

			let cat = rec.get('AppCategory');

			if(!groups[cat]){
				groups[cat] = {
					count:1,
					category:cat,
					categoryLabel:rec.get('AppCategoryLabel')
				};

				rec.commit();
			}else{
				groups[cat].count++;
			};
		});

		let groupsArr = [];
		for(let cat in groups){
			let group = groups[cat];
			groupsArr.push([group.category, group.categoryLabel, group.count]);
		};

		this.getViewModel().getStore('oinCategoryStore').loadData(groupsArr);

		this.loadAppListFromUrl();
	},

	updateFilters: function() {
		let filters = [];
		if(this.categoryFilter !== null){
			filters.push(this.categoryFilter);
		}
		if(this.searchFilter !== null){
			filters.push(this.searchFilter);
		}

		if(this.searchByNameFilter !== null){
			filters.push(this.searchByNameFilter);
		}

		filters = filters.concat(this.capabilityFilter);

		//console.log(filters);

		let store = this.getViewModel().getStore('oinAppStore');

		if(filters.length > 0){
			store.clearFilter(true);
			store.filter(filters);
		}else{
			store.clearFilter();
		}

		this.queryById('oinAppGrid').getScrollable().scrollTo(0,0);
	},

	loadAppsFromAppList: function(appList, listName) {
		this.queryById('tabs').setActiveItem('myAppsTab');
		this.queryById('appListName').setHtml(listName);

		let foundRecs = [];

		this.getViewModel().getStore('oinAppStore').each(function(rec){
			if(appList.indexOf(rec.get('Version'))>= 0){
				let clone = rec.clone();
				clone.phantom = true;
				foundRecs.push(clone);
			}
		},this,{filtered:true});

		let MyAppsStore = this.getViewModel().getStore('myApps');
		MyAppsStore.removeAll();
		MyAppsStore.add(foundRecs);
		MyAppsStore.sync();

		this.updateMyAppCount(MyAppsStore);
	},

	saveListResponse: function(data) {
		let store = this.getViewModel().getStore('myLists');
		store.loadData([data],true);
		store.sync();
		this.updateMyListsCount(store);
	},

	saveList: function(listName) {
		let appList = [];
		this.getViewModel().getStore('myApps').each(function(rec){
			appList.push(rec.get('Version'));
		});

		AERP.Ajax.request({
			url:'api/create',
			mask:this,
			jsonData:{
				listName:listName,
				appList:appList
			},
			success:function(resp){
				resp.data.appList = Ext.decode(resp.data.appList);
				this.saveListResponse(resp.data);
			},
			scope:this
		});
	},

	saveListGetName: function() {
		if(!this.saveWin){
			this.saveWin = Ext.create('BetterOinSearch.view.SaveWindow',{
				listeners:{
					scope:this,
					saved:function(name){
						this.saveList(name);
					}
				}
			});
		}

		this.saveWin.clearAndShow();
	},

	getLastApiRefresh: function() {
		let appVer = '1.0.4';

		AERP.Ajax.request({
			url:'lastApiUpdate',
			method:'GET',
			rawResponse:true,
			success:function(resp){
				this.queryById('lastUpdate').update('App v'+appVer+'<BR>Data Refreshed '+resp);
			},
			scope:this
		});
	},

	readWorkflowData: function() {
		this.workflowData = {};
		this.workflowsTranslate = {};
		this.workflowTemplates = {};

		this.workflowsTranslate = {
			'boxnet':'box',
			'salesforce':'salesforce2_29',
			'shopiffy':'shopify',
			'evident':'evidentidverify',
			'servicenow_ud':'servicenow',
			'mixpanelprovisioning':'mixpanel',
			'jira_onprem':'jira2',
			'marketo':'marketo2_29',
			'atlassianservicedesk':'jiraservicedesk',
			'google':'googledrive', // ?
			'cloudconsole':'googledirectory', // ?
			'inboxbygmail':'gmail',
			'atlassian':'atlassianadmin',
			'amazon_aws_sso':'amazons3_29', // ?
			'msoutlook':'office365mail', //?
			'office365':'office365admin',
			'ghecenterprisesaml':'github',
			'OpsGenie':'opsgenie',
			'dropbox_for_business':'dropboxforbusiness',
			'jamfsoftwareserver':'jamfproclassicapi_3d816a0a0b7a410fa88c3de81a4aeccb',
			'smartrecruiterssaml':'smartrecruiters',
			'hubspotsaml':'hubspotcrm',
			'scaleft':'advancedserveraccess',
			'zoomus':'zoom',
			'duoadminpanel':'duosecurityadmin',
			'zendesk':'zendeskoauth2',
			'docusign':'docusign2'
		};

		AERP.Ajax.request({
			url:'workflow-all.json',
			method:'GET',
			rawResponse:true,
			success:function(resp){
				let workflowData;
				try {
					workflowData = JSON.parse(resp);
					this.workflowData = workflowData;
				} catch (error) {
					console.error(error);
				}

				AERP.Ajax.request({
					url:'workflow-templates.json',
					method:'GET',
					rawResponse:true,
					success:function(resp){
						let workflowTemplates;
						try {
							workflowTemplates = JSON.parse(resp);
							this.workflowTemplates = workflowTemplates;
						} catch (error) {
							console.error(error);
						}

						this.showWorkflowDetails('okta','workflowDetailsMyApps');
						this.showWorkflowDetails('okta','workflowDetails');
					},
					scope:this
				});

			},
			scope:this
		});


	},

	updateMyAppCount: function(store) {
		this.queryById('myAppsTab').setTitle('My Apps ('+store.getCount()+')');
	},

	filterWorkflowTemplates: function(app) {
		let matches = [];

		Ext.each(this.workflowTemplates,function(flow){
			Ext.each(flow.connectors,function(con){
				if(con.name === app){
					matches.push({
						title:flow.title,
						name:flow.name,
						description:flow.description
					});
				}
			});
		},this);

		return matches;
	},

	showWorkflowDetails: function(appName, panelId) {
		let details = this.queryById(panelId);

		if(this.workflowsTranslate.hasOwnProperty(appName) ){
			appName = this.workflowsTranslate[appName];
		}

		if(this.workflowData[appName]){
			let wf = this.workflowData[appName];

			wf.templates = this.filterWorkflowTemplates(appName);

			//console.log('showing wf data',wf);
			details.setTitle('Workflows for '+wf.displayname);
			details.update(wf);
		}else{
			details.setTitle('Workflows');
			details.update('<center>Select an app supporting <BR\>workflows to view details.</center>');
		}
	},

	updateMyListsCount: function(store) {
		this.queryById('myAppLists').setTitle('My App Lists ('+store.getCount()+')');
	}

});